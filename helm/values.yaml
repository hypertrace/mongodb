nameOverride: ""
fullnameOverride: ""

image:
  repository: mongo
  tag: 4.4.22
  pullPolicy: "IfNotPresent"

imagePullSecrets: []

serviceAccount:
  create: true
  name: ""

## Run job to create different mongo users
createUsers: false

## Use a user provided secret for mongodb usernames and passwords
### If false, a default secret will be generated
useExistingSecret:
  enabled: false
  name: "mongodb-credentials"

## MongoDB user passwords
### Used when existing secret is not provided
mongodbRootUsername: ""
mongodbRootPassword: ""
mongodbServiceUsername: ""
mongodbServicePassword: ""
mongodbDeveloperUsername: ""
mongodbDeveloperPassword: ""

## Kubernetes service type
service:
  name: ""
  annotations: {}
  type: ClusterIP
  clusterIP: ""
  port: 27017
  nodePort: ""
  externalIPs: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []

## Setting up replication
replicaSet:
  enabled: false
  name: rs0
  enableMajorityReadConcern: true
  key: ""

  ## Number of replicas per each node type
  replicas:
    secondary: 1
    arbiter: 1

  ## Pod Disruption Budget
  podDisruptionBudget:
    enabled: false
    minAvailable:
      secondary: 1
      arbiter: 1
    maxUnavailable:
      secondary: ""
      arbiter: ""

  ## job for initiating replica set
  job:
    enabled: true
    image:
      repository: hypertrace/mongo-curl
      tag: ""
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Annotations to be added to the deployment or statefulsets
annotations: {}

# Additional labels to apply to the deployment or statefulsets
labels: {}

# Annotations to be added to MongoDB pods
podAnnotations: {}

# Additional pod labels to apply
podLabels: {}

## Pod Security Context
podSecurityContext: {}

containerSecurityContext: {}

commonPodLabels: {}

commonPodAnnotations: {}

## Configure resource requests and limits
resources: {}

# Define separate resources per arbiter, which are less then primary or secondary
# used only when replica set is enabled
resourcesArbiter:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

## Node selector
nodeSelector: {}

## Define Separate nodeSelector for secondaries
nodeSelectorSecondary: {}

## Define Separate nodeSelector for arbiter
nodeSelectorArbiter: {}

## Termination Grace Period
terminationGracePeriodSeconds: 600

## Affinity
affinity: {}

# Define separate affinity for secondary pod
affinitySecondary: {}

# Define separate affinity for arbiter pod
affinityArbiter: {}

## Tolerations
tolerations: []

## Host Network
hostNetwork: false
hostNetworkArbiter: false

## updateStrategy for MongoDB Primary, Secondary and Arbitrer statefulsets
updateStrategy:
  type: RollingUpdate

## Enable persistence using Persistent Volume Claims
persistence:
  mountPath: /data/db
  subPath: ""
  storageClassName: "standard"
  accessModes: ["ReadWriteOnce"]
  size: 2Gi

## Configure extra options for liveness and readiness probes
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

# Storage class
storageclass:
  enabled: false
  name: mongo
  annotations: {}
  provisioner: kubernetes.io/gce-pd
  reclaimPolicy: Delete
  volumeBindingMode: Immediate
  parameters:
    type: pd-standard

initContainer:
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

config:
  storage:
    directoryPerDB: false
    journal:
      enabled: true
  systemLog:
    verbosity: 0
  security:
    authorization: disabled
    keyFile: "/etc/mongodb-keyfile/mongodb-replica-set-key"
  net:
    ipv6: false
    bindIpAll: true

exporter:
  enabled: false

  affinity: {}

  annotations: {}

  extraArgs:
    - --collect-all       # Collect from all exporters
    - --discovering-mode  # Collect from all collections and databases
    - --compatible-mode   # Old metrics are also exposed (used in prometheusrules)

  image:
    pullPolicy: IfNotPresent
    repository: percona/mongodb_exporter
    tag: 0.39.0

  imagePullSecrets: []

  livenessProbe:
    httpGet:
      path: /
      port: http-metrics
    initialDelaySeconds: 10

  # [mongodb://][user:pass@]host1[:port1][,host2[:port2],...][/database][?options]
  mongodb:
    uri: mongo:27017

  nodeSelector: {}

  podAnnotations: {}
  #  prometheus.io/scrape: "true"
  #  prometheus.io/port: "metrics"

  port: "9216"

  priorityClassName: ""

  readinessProbe:
    httpGet:
      path: /
      port: http-metrics
    initialDelaySeconds: 10

  replicas: 1

  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # Extra environment variables that will be passed into the exporter pod
  env: {}

  service:
    annotations: {}
    port: 9216
    type: ClusterIP

  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    secure: false
    tlsConfig: {}
    namespace:
    additionalLabels: {}

  tolerations: []

  dashboard:
    enabled: false
    namespace: monitoring
    annotations: {}

  prometheusrule:
    enabled: false
    annotations: {}
    additionalRuleLabels: {}
