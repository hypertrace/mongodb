{{- if .Values.replicaSet.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "mongodb.fullname" . }}-arbiter
  labels:
    app: {{ template "mongodb.name" . }}
    chart: {{ template "mongodb.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ template "mongodb.name" . }}
      release: {{ .Release.Name }}
      component: arbiter
  podManagementPolicy: "Parallel"
  serviceName: {{ template "mongodb.fullname" . }}-headless
  replicas: {{ .Values.replicaSet.replicas.arbiter }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if (eq "Recreate" .Values.updateStrategy.type) }}
    rollingUpdate: null
    {{- end }}
  template:
    metadata:
      labels:
        app: {{ template "mongodb.name" . }}
        chart: {{ template "mongodb.chart" . }}
        release: {{ .Release.Name }}
        component: arbiter
        {{- if .Values.podLabels }}
        {{- toYaml .Values.podLabels | nindent 8 }}
        {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      {{- if (eq .Values.config.security.authorization "enabled") }}
      initContainers:
        - name: copy-keyfile
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['sh', '-c']
          args:
            - |
              cp /keyfile/mongodb-replica-set-key {{ .Values.config.security.keyFile | quote }}
              chown 999:999 {{ .Values.config.security.keyFile | quote }}
              chmod 0400 {{ .Values.config.security.keyFile | quote }}
          volumeMounts:
            - name: keyfile-copy
              mountPath: /etc/mongodb-keyfile
            - name: keyfile
              mountPath: /keyfile
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ template "mongodb.name" . }}-arbiter
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "--config"
            - "/etc/mongodb/mongodb.conf"
          ports:
            - containerPort: {{ .Values.service.port }}
              name: mongo
          env:
            - name: MONGODB_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if (eq .Values.config.security.authorization "enabled") }}
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  {{- if .Values.useExistingSecret.enabled }}
                  name: {{ .Values.useExistingSecret.name }}
                  {{- else }}
                  name: {{ template "mongodb.fullname" . }}
                  {{- end }}
                  key: mongodb-root-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.useExistingSecret.enabled }}
                  name: {{ .Values.useExistingSecret.name }}
                  {{- else }}
                  name: {{ template "mongodb.fullname" . }}
                  {{- end }}
                  key: mongodb-root-password
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: mongo
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: mongo
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resourcesArbiter | nindent 12 }}
          volumeMounts:
            - name: datadir
              mountPath: {{ .Values.persistence.mountPath }}
              subPath: {{ .Values.persistence.subPath }}
            - name: config
              mountPath: /etc/mongodb
            {{- if eq .Values.config.security.authorization "enabled" }}
            - name: keyfile-copy
              mountPath: /etc/mongodb-keyfile
            {{- end }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      serviceAccountName: {{ template "mongodb.serviceAccountName" . }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ int .Values.terminationGracePeriodSeconds }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.affinityArbiter }}
      affinity:
        {{- toYaml .Values.affinityArbiter | nindent 8 }}
      {{- end -}}
      {{- if (or .Values.nodeSelector .Values.nodeSelectorArbiter) }}
      nodeSelector:
        {{- toYaml (default .Values.nodeSelector .Values.nodeSelectorArbiter) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.hostNetworkArbiter }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      volumes:
        - name: datadir
          emptyDir: {}
        - name: config
          configMap:
            name: {{ template "mongodb.fullname" . }}
        {{- if eq .Values.config.security.authorization "enabled" }}
        - name: keyfile-copy
          emptyDir: {}
        - name: keyfile
          secret:
            secretName: {{ template "mongodb.fullname" . }}
            defaultMode: 0400
            items:
              - key: mongodb-replica-set-key
                path: mongodb-replica-set-key
        {{- end }}
{{- end }}
