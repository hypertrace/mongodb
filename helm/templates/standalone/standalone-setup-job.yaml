{{- if and (not .Values.replicaSet.enabled) .Values.createUsers }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-users-setup-job" (include "mongodb.name" .) | trunc 53 | trimSuffix "-" }}
  labels:
    app: {{ template "mongodb.name" . }}
    chart: {{ template "mongodb.chart" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    helm.sh/hook-weight: "100"
    helm.sh/hook: "post-install,post-upgrade"
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  template:
    metadata:
      name: {{ printf "%s-users-setup-job" (include "mongodb.name" .) | trunc 53 | trimSuffix "-" }}
      {{- with .Values.commonPodAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.commonPodLabels }}
      labels:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      restartPolicy: Never
      containers:
        - name: {{ printf "%s-users-setup-job" (include "mongodb.name" .) | trunc 53 | trimSuffix "-" }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              SVC_NAME="{{ template "mongodb.serviceName" . }}"
              HOST="${SVC_NAME}.${NAMESPACE}.svc.cluster.local"
              PORT={{ int .Values.service.port }}
              CONN_STRING="mongodb://${HOST}:${PORT}/admin"

              wait_for_mongo(){
                local host="$1"
                local port="$2"

                ready="false"
                i=0
                while [ $i -lt 30 ]; do
                  mongo --host $host --port $port --eval "db.adminCommand('ping')"
                  if [ $? -eq 0 ]; then
                    ready="true"
                    break
                  fi
                  sleep 10
                  i=$(expr $i + 1)
                done
                if [ "$ready" = "false" ]; then
                  echo "Host $host is not ready"
                  exit 1
                fi
              }

              finish() {
                code=$?
                curl -s -XPOST http://127.0.0.1:15020/quitquitquit
                exit $code
              }
              trap finish EXIT
              # wait for mongo instance to be up and running
              wait_for_mongo "$HOST" "$PORT"
              mongo "${CONN_STRING}" /setup-scripts/mongo-users.js
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if eq .Values.config.security.authorization "enabled" }}
            - name: MONGO_AUTHENTICATION_ENABLED
              value: "true"
            {{- end }}
            - name: MONGO_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  {{- if .Values.useExistingSecret.enabled }}
                  name: {{ .Values.useExistingSecret.name }}
                  {{- else }}
                  name: {{ template "mongodb.fullname" . }}
                  {{- end }}
                  key: mongodb-root-username
            - name: MONGO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.useExistingSecret.enabled }}
                  name: {{ .Values.useExistingSecret.name }}
                  {{- else }}
                  name: {{ template "mongodb.fullname" . }}
                  {{- end }}
                  key: mongodb-root-password
            - name: MONGO_SERVICE_USERNAME
              valueFrom:
                secretKeyRef:
                  {{- if .Values.useExistingSecret.enabled }}
                  name: {{ .Values.useExistingSecret.name }}
                  {{- else }}
                  name: {{ template "mongodb.fullname" . }}
                  {{- end }}
                  key: mongodb-service-username
            - name: MONGO_SERVICE_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.useExistingSecret.enabled }}
                  name: {{ .Values.useExistingSecret.name }}
                  {{- else }}
                  name: {{ template "mongodb.fullname" . }}
                  {{- end }}
                  key: mongodb-service-password
            - name: MONGO_DEVELOPER_USERNAME
              valueFrom:
                secretKeyRef:
                  {{- if .Values.useExistingSecret.enabled }}
                  name: {{ .Values.useExistingSecret.name }}
                  {{- else }}
                  name: {{ template "mongodb.fullname" . }}
                  {{- end }}
                  key: mongodb-developer-username
            - name: MONGO_DEVELOPER_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.useExistingSecret.enabled }}
                  name: {{ .Values.useExistingSecret.name }}
                  {{- else }}
                  name: {{ template "mongodb.fullname" . }}
                  {{- end }}
                  key: mongodb-developer-password
          volumeMounts:
            - name: {{ include "mongodb.name" . }}-setup-scripts
              mountPath: /setup-scripts
          {{- with .Values.initContainer.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: {{ include "mongodb.name" . }}-setup-scripts
          configMap:
            name: {{ template "mongodb.fullname" . }}-setup-scripts
            defaultMode: 0555
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
