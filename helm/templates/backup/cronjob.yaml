{{- if .Values.backup.enabled }}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "mongodb.fullname" . }}-backup
  labels:
    app: {{ template "mongodb.name" . }}
    chart: {{ template "mongodb.chart" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  schedule: {{ .Values.backup.schedule |  quote }}
  {{- if .Values.backup.startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ int .Values.backup.startingDeadlineSeconds }}
  {{- end }}
  {{- if .Values.backup.concurrencyPolicy }}
  concurrencyPolicy: {{ .Values.backup.concurrencyPolicy }}
  {{- end }}
  {{- if not .Values.backup.enabled }}
  suspend: true
  {{- end }}
  jobTemplate:
    spec:
      template:
        {{- if .Values.backup.podAnnotations }}
        metadata:
          annotations:
            {{- toYaml .Values.backup.podAnnotations | nindent 12 }}
        {{- end }}
        spec:
          restartPolicy: Never
          containers:
            - name: {{ include "mongodb.fullname" . }}-backup
              image: {{ .Values.backup.image.repository }}:{{ default .Chart.Version .Values.backup.image.tag }}
              imagePullPolicy: {{ .Values.backup.image.pullPolicy }}
              command: ["/bin/sh", "-cx"]
              args:
                - |
                  finish() {
                    code=$?
                    curl -s -XPOST http://127.0.0.1:15020/quitquitquit
                    rm /backup/mongodb*
                    exit $code
                  }
                  trap finish EXIT

                  BOTO_CONFIG_PATH=${BOTO_CONFIG_PATH:-/root/.boto}
                  cat <<EOF > $BOTO_CONFIG_PATH
                  [Credentials]
                  gs_service_key_file = $GOOGLE_APPLICATION_CREDENTIALS
                  [Boto]
                  https_validate_certificates = True
                  [GoogleCompute]
                  [GSUtil]
                  content_language = en
                  default_api_version = 2
                  [OAuth2]
                  EOF

                  sleep 15
                  timestamp=$(date +%Y-%m-%d-%H-%M-%S)
                  month=$(date +%Y-%m)
                  BACKUP_LOCATION=gs://$BUCKET/mongodb/$CLUSTER_NAME/$month
                  mongodump --uri="$MONGODB_URI" {{ if .Values.backup.oplog }} --oplog {{ end }} --gzip --archive=/backup/mongodb-${timestamp}.tar.gz || exit 2
                  gsutil cp "/backup/mongodb-${timestamp}.tar.gz" "$BACKUP_LOCATION/mongodb-${timestamp}.tar.gz" || exit 2
                  rm /backup/mongodb-${timestamp}.tar.gz || exit 0
              env:
                - name: CLUSTER_NAME
                  value: {{ .Values.backup.cluster }}
                - name: BUCKET
                  value: {{ .Values.backup.gcloud.bucket }}
                - name: GOOGLE_APPLICATION_CREDENTIALS
                  value: "/accounts/key.json"
                - name: MONGODB_URI
                  value: {{ .Values.backup.mongodb.uri | quote }}
              volumeMounts:
                - name: backup-location
                  mountPath: "/backup"
                - name: gcs-iam-secret
                  mountPath: "/accounts"
          volumes:
            - name: backup-location
              emptyDir: {}
            - name: gcs-iam-secret
              secret:
                secretName: {{ .Values.backup.gcloud.secretName }}
          {{- if .Values.backup.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml .Values.backup.imagePullSecrets | nindent 12 }}
          {{- end }}
          affinity:
            {{- toYaml .Values.backup.affinity | nindent 12 }}
          nodeSelector:
            {{- toYaml .Values.backup.nodeSelector | nindent 12 }}
          securityContext:
            {{- toYaml .Values.backup.securityContext | nindent 12 }}
          tolerations:
            {{- toYaml .Values.backup.tolerations | nindent 12 }}
{{- end }}
